[{"categories":null,"content":"本博客使用静态博客生成器Hugo和主题DoIt生成。 网站同步更新于以下地址: https://ray233.pages.dev (Cloudflare Pages) https://railzy.github.io (Github Pages) ","date":"2021-12-06","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于本博客","uri":"/about/#"},{"categories":[],"content":"想将视频嵌入到博客网页中，但是发现博客网站或生成器没有提供包装好的方法。在经过搜索后，发现可以尝试使用直接插入 html 代码的方法在博客网页中嵌入视频 ","date":"2021-12-05","objectID":"/webpage-embed-auto-size-iframe-video/:0:0","series":[],"tags":[],"title":"将自适应宽高大小的iframe视频嵌入博客网页","uri":"/webpage-embed-auto-size-iframe-video/#"},{"categories":[],"content":"实现嵌入自适应视频 HTML 代码视频网站通常会提供用于嵌入视频的 iframe 标签 html 代码，将该代码嵌入网页中并实现视频显示大小自适应的完整代码如下，在 html 文件或 markdown (需要解析器支持) 等支持 html 代码的地方都可以使用。 \u003c!-- 定义 iframe-container 的 CSS 样式 插入多个视频时也只需要定义一次 也可以放在引入的 CSS 文件中 iframe-container 可任意改名，前后一致即可 --\u003e \u003cstyle type='text/css'\u003e .iframe-container { /* padding-top 为高/宽的值 16:9 为 9/16=56.25% */ padding-top: 56.25%; position: relative; } .iframe-container iframe { position: absolute; height: 100%; width: 100%; top: 0; left: 0; } \u003c/style\u003e \u003c!--将视频网站的嵌入代码用 iframe-container 的 div 标签包裹起来--\u003e \u003cdiv class=\"iframe-container\"\u003e \u003c!--这里放入网站提供的 iframe 代码 \u003ciframe\u003e \u003c/iframe\u003e --\u003e \u003c/div\u003e ","date":"2021-12-05","objectID":"/webpage-embed-auto-size-iframe-video/:1:0","series":[],"tags":[],"title":"将自适应宽高大小的iframe视频嵌入博客网页","uri":"/webpage-embed-auto-size-iframe-video/#实现嵌入自适应视频-html-代码"},{"categories":[],"content":"例子以 bilibili 为例，Hugo 原生并没有提供插入 bilibili 视频的 shortcode。因此我们需要自己手动插入视频。 我们在 bilibili 的视频页面的分享按钮中找到提供的嵌入代码 \u003ciframe src=\"//player.bilibili.com/player.html?aid=722153828\u0026bvid=BV1KS4y197BN\u0026cid=455022263\u0026page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"\u003e \u003c/iframe\u003e 现在直接将代码直接放入内容中，效果如下。可以发现虽然视频成功嵌入了，但显示效果不好，这显然不是我们想要的。 继续完善 HTML 代码，放入文章内容中，让我们再看看效果 \u003cstyle type='text/css'\u003e .iframe-container { padding-top: 56.25%; position: relative; } .iframe-container iframe { position: absolute; height: 100%; width: 100%; top: 0; left: 0; } \u003c/style\u003e \u003cdiv class=\"iframe-container\"\u003e \u003ciframe src=\"//player.bilibili.com/player.html?aid=722153828\u0026bvid=BV1KS4y197BN\u0026cid=455022263\u0026page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"\u003e \u003c/iframe\u003e \u003c/div\u003e .iframe-container { padding-top: 56.25%; position: relative; } .iframe-container iframe { position: absolute; height: 100%; width: 100%; top: 0; left: 0; } 可以发现，现在视频显示占满网页，宽度与高度的比例固定为设定好的 16:9，能够跟随网页显示变化自动调整显示尺寸。这样，无论是在桌面端还是移动端，都能有良好的显示效果了。 ","date":"2021-12-05","objectID":"/webpage-embed-auto-size-iframe-video/:2:0","series":[],"tags":[],"title":"将自适应宽高大小的iframe视频嵌入博客网页","uri":"/webpage-embed-auto-size-iframe-video/#例子"},{"categories":[],"content":"篇幅压缩为了缩减对源文件篇幅的占用，可以去除无用的空格和换行符。 \u003cstyle type='text/css'\u003e.iframe-container {padding-top: 56.25%;position: relative;}.iframe-container iframe {position: absolute;height: 100%;width: 100%;top: 0;left: 0;}\u003c/style\u003e\u003cdiv class=\"iframe-container\"\u003e\u003ciframe src=\"//player.bilibili.com/player.html?bvid=BV1KS4y197BN\u0026page=1\u0026high_quality=1\u0026danmaku=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"\u003e\u003c/iframe\u003e\u003c/div\u003e 只插入一个视频时， CSS 也可以写到 div 和 iframe 标签内。(虽然也没节约多少长度) \u003cdiv style=\"padding-top: 56.25%;position: relative;\"\u003e\u003ciframe src=\"//player.bilibili.com/player.html?bvid=BV1KS4y197BN\u0026page=1\u0026high_quality=1\u0026danmaku=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute;height: 100%;width: 100%;top: 0;left: 0;\"\u003e\u003c/iframe\u003e\u003c/div\u003e 使用哪一种可以根据个人喜好选择。 ","date":"2021-12-05","objectID":"/webpage-embed-auto-size-iframe-video/:3:0","series":[],"tags":[],"title":"将自适应宽高大小的iframe视频嵌入博客网页","uri":"/webpage-embed-auto-size-iframe-video/#篇幅压缩"},{"categories":[],"content":"方法评价优点 通用性高，不依赖额外插件 迁移时文章内容一般不需要另外处理即可保持不变 缺点 使用不太方便 内容不直观 占用 markdown 源文件内容篇幅多(虽然可以通过去除无用空格和换行符缓解) ","date":"2021-12-05","objectID":"/webpage-embed-auto-size-iframe-video/:4:0","series":[],"tags":[],"title":"将自适应宽高大小的iframe视频嵌入博客网页","uri":"/webpage-embed-auto-size-iframe-video/#方法评价"},{"categories":[],"content":"碎碎念吐槽下 bilibili。 虽然 bilibili 提供了嵌入视频代码，但给的质量挺抠的，用复制的代码默认播最低画质 360p，只有手动在 src 地址后加上 high_quality=1 参数才会默认播高画质，而这画质最高也只给 720p，点 1080p 就自动跳转到 bilibili 自己的网站内了。 另外在桌面端显示时，页面尺寸小就变成手机页面，没法使用进度条和弹幕开关等控制栏，而页面尺寸大就固定显示进度条和发弹幕底栏，没啥用又占空间，一点又跳到 bilibili 自己的网站去了。体验实在是一般。 人家 YouTube 嵌入就好很多，清晰度没搞限制，网络好就自动给你选最好的，控制栏不占空间，页面尺寸变化能很好地适应，可以自动读取 YouTube 账号登陆状态并交互。基本可以直接正常播放使用。 放个视频来对比一下 ","date":"2021-12-05","objectID":"/webpage-embed-auto-size-iframe-video/:5:0","series":[],"tags":[],"title":"将自适应宽高大小的iframe视频嵌入博客网页","uri":"/webpage-embed-auto-size-iframe-video/#碎碎念"},{"categories":null,"content":"写在前面","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:1:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#写在前面"},{"categories":null,"content":"Why Ubuntu Point Cloud Library也可以在Windows中安装使用，但是在Ubuntu中安装配置比较方便，不需要像在Windows上一样手动添加到系统环境中，不容易出现错误，且网上可参考内容较多，因此我个人选择用Ubuntu。当然，Ubuntu的配置也会遇到问题。自行取舍。 Ubuntu是Linux的一个发行版。有完善的图形系统界面，使用较为友好。 Ubuntu内置了官方的包管理器，可以方便快捷地下载安装很多软件及大型项目编译好的包，节省了自己下载编译及安装管理的时间、存储空间和精力。 Ubuntu中设置文件位置、软件包文件储存位置等都是一致的。我们在引用库文件、调整设置时，可以比较容易在网上找到相关内容的参考，且不易产生错误。 许多Point Cloud Library项目开发环境都是在Ubuntu中，使用Ubuntu可以方便我们的环境与多数项目保持一致，方便直接参照项目教程运行项目。 直接使用CMakeLists.txt和cmake指令编译PCL项目，不用像在Visual Studio上一样修改大量的设置。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:1:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#why-ubuntu"},{"categories":null,"content":"Why 虚拟机经常可以看到，一些有用的项目指定了运行系统为Linux，而我们日常使用的电脑系统通常为Windows或macOS。使用虚拟机即在我们现有的系统中再创建一个虚拟的电脑，我们可以在其中装需要的系统来使用指定系统的项目，免去了另外专门购置一台电脑的烦恼。 在参考其他人的项目时，往往会看到里面注明了运行环境，如Ubuntu16.04，Ubuntu18.04等，如果直接在未经测试的系统版本环境上使用这些项目，有时会出现难以预料的未知错误。创建多个虚拟机，在不同虚拟机中配置不同的系统，方便我们保持系统环境与项目要求的相一致，减少不明bug。 当然，虚拟机也会带来一些内部性能下降问题和硬件通讯不便的问题，不过在普通的工作学习中不会有太大感觉。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:1:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#why-虚拟机"},{"categories":null,"content":"VirtualBox虚拟机管理器的安装","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:2:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#virtualbox虚拟机管理器的安装"},{"categories":null,"content":"安装包下载本次教程采用的虚拟机管理器为VirtualBox。VirtualBox是一个比较常用的开源免费的虚拟机管理器，功能基本满足常见的需求。 官网下载地址在下面，可以自行根据所使用系统下载安装包，Windows选择Windows hosts，macOS选择OS X hosts。 https://www.virtualbox.org/wiki/Downloads 演示的安装包版本为VirtualBox 6.1.18 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:2:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#安装包下载"},{"categories":null,"content":"Windows安装步骤双击打开安装包，点下一步 点击浏览，自行选择安装位置。功能全选或保持默认即可。完成后点下一步。 注册文件关联建议选择，其他保持默认或根据需要自行选择。点下一步。 点“是”，开始安装。等待安装完成。 安装完成后，打开就能进入VirtualBox管理器界面。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:2:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#windows安装步骤"},{"categories":null,"content":"在虚拟机中安装Ubuntu18.04比较多的Point Cloud Library项目都是在Ubuntu18.04上开发的，因此建议直接使用18.04保持环境一致性，不要还没入门就在处理bug上纠结。我在Ubuntu20.04中使用一些Ubuntu18.04开发的项目时就出现了错误，于是转用18.04。 其他版本的Ubuntu安装过程大同小异，也可以参考下面的步骤。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:3:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#在虚拟机中安装ubuntu1804"},{"categories":null,"content":"Ubuntu-desktop镜像下载Ubuntu18.04官方下载地址 https://releases.ubuntu.com/18.04/ 可以直接点击ubuntu-18.04.5-desktop-amd64.iso下载，也可以下载ubuntu-18.04.5-desktop-amd64.iso.torrent种子使用BT下载。直接下载速度可能较慢，而作为热门资源使用BT下载可能较快。 注意下载desktop版的镜像，不要用server的。 Ubuntu最新版的下载地址在 https://ubuntu.com/download/desktop 。如果想自己学习尝试也可以下载使用试试。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:3:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#ubuntu-desktop镜像下载"},{"categories":null,"content":"修改虚拟机存储位置（可选）虚拟机需要使用较多的存储空间，我运行PCL项目使用的虚拟机占用了21.3G的空间，如果使用快照功能则所需空间更大。 因此，建议把虚拟机存储位置移动到空间较为充足的位置。 点击管理→全局设定 在默认虚拟电脑位置里点其它，自行选择喜欢的存储空间充足的位置。点OK保存。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:3:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#修改虚拟机存储位置可选"},{"categories":null,"content":"新建虚拟电脑点击控制→新建。或工具→新建。 选择专家模式 名称根据喜好输入，类型选择Linux，版本选择Ubuntu (64-bit)。内存我一般设置4096MB即4GB，具体使用可根据自身情况进行调整。虚拟硬盘选择现在创建虚拟硬盘。设置完成后点击创建。 弹出创建虚拟硬盘界面。虚拟硬盘文件位置可以默认自动生成，也可以按喜好调整。文件大小可以设置大点，40GB左右，因为选择动态分配创建的虚拟硬盘文件会自动根据内容调整大小，而不是直接占据设置的大小，大小设大点可以避免虚拟机内空间不足时扩容遇到的设置麻烦。设置完成后点击创建。 我们可以看到左侧出现刚刚创建的虚拟电脑。 在设置里还可以对虚拟机性能作一些调整，可自行查看，注意有些选项要虚拟机关机时才可以调整。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:3:3","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#新建虚拟电脑"},{"categories":null,"content":"安装Ubuntu18.04选择刚刚创建的虚拟机，点击启动。弹出选择启动盘窗口。点击选择虚拟光盘文件按钮。 点击注册按钮，选择前面下载的Ubuntu desktop的iso镜像。 点击ubuntu-18.04.5-desktop-amd64.iso，点击选择 回到此界面，确认选择了正确的镜像，点击启动 开始安装，左侧找到并选择中文(简体)，然后点击安装Ubuntu 屏幕上方可能有VirtualBox的一些提示，阅读后可以关掉，不影响 一般键盘布局默认即可，点继续 选择正常安装，安装Ubuntu时下载更新可选可不选，不选可节约安装过程时间。点击继续 安装类型默认选择清除整个磁盘并安装Ubuntu即可，其它选项不清楚就保持不变。然后点击现在安装 点继续 输入Shanghai，选择，点继续 您的姓名处可按喜好输入用户名，下面会自动填写，密码也可按喜好输入。填写完后点继续 这里的用户名和密码一定要记好!!! 接下来进入漫长的等待安装完成阶段，安装过程中最好保持网络通畅 安装完毕，重启。按Enter 重启完成，确认开机提示，完成安装 注意不要确认升级到20.04!!! ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:3:4","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#安装ubuntu1804"},{"categories":null,"content":"Ubuntu18.04设置调整","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#ubuntu1804设置调整"},{"categories":null,"content":"调整屏幕大小常规设置找到设置，进入。找到并进入设备，点击分辨率，选择喜欢的分辨率，点击窗口右上角应用。虚拟机窗口大小会相应变化。觉得合适的话点击保存更改 注意设置窗口右侧可能被遮挡，按住设置窗口上边框并拖动即可。 自动调整分辨率**需要VirtualBox增强功能，见虚拟机与主机交互中增强功能安装部分 安装增强功能后，可以在打开虚拟机后在窗口上方的“视图”菜单中选择“自动调整显示尺寸”，调整外侧窗口大小后内部Ubuntu虚拟机分辨率自动调整 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#调整屏幕大小"},{"categories":null,"content":"调整屏幕大小常规设置找到设置，进入。找到并进入设备，点击分辨率，选择喜欢的分辨率，点击窗口右上角应用。虚拟机窗口大小会相应变化。觉得合适的话点击保存更改 注意设置窗口右侧可能被遮挡，按住设置窗口上边框并拖动即可。 自动调整分辨率**需要VirtualBox增强功能，见虚拟机与主机交互中增强功能安装部分 安装增强功能后，可以在打开虚拟机后在窗口上方的“视图”菜单中选择“自动调整显示尺寸”，调整外侧窗口大小后内部Ubuntu虚拟机分辨率自动调整 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#常规设置"},{"categories":null,"content":"调整屏幕大小常规设置找到设置，进入。找到并进入设备，点击分辨率，选择喜欢的分辨率，点击窗口右上角应用。虚拟机窗口大小会相应变化。觉得合适的话点击保存更改 注意设置窗口右侧可能被遮挡，按住设置窗口上边框并拖动即可。 自动调整分辨率**需要VirtualBox增强功能，见虚拟机与主机交互中增强功能安装部分 安装增强功能后，可以在打开虚拟机后在窗口上方的“视图”菜单中选择“自动调整显示尺寸”，调整外侧窗口大小后内部Ubuntu虚拟机分辨率自动调整 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#自动调整分辨率"},{"categories":null,"content":"调整字体大小Ubuntu并没有自带内容放大到125%，可能看起来字体比较小，比较吃力，可以调大点 设置→通用辅助功能→大号文本 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#调整字体大小"},{"categories":null,"content":"修改软件包下载源默认的Ubuntu软件包下载源速度有时比较慢，换成阿里云的镜像源或者清华的镜像源通常会比较快。 在应用程序菜单中进入软件和更新，在Ubuntu 软件选项卡中的下载自点击其他站点 可以看到，有很多不同的服务器供选择。mirrors.aliyun.com就是阿里云的源，mirrors.tuna.tsinghua.edu.cn就是清华的源，其他镜像源的效果和速度也可以自行尝试。协议一般直接选择http。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:3","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#修改软件包下载源"},{"categories":null,"content":"关闭自动熄屏锁定进入设置→电源。空白屏幕选从不，自动挂起全部改为关闭。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:4","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#关闭自动熄屏锁定"},{"categories":null,"content":"关闭更新Ubuntu大版本更新提示避免提示从18.04升级到20.04 在应用程序菜单中找到软件和更新，点击更新，有新版本时通知我中选择从不，认证账户密码，确定。 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:4:5","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#关闭更新ubuntu大版本更新提示"},{"categories":null,"content":"虚拟机与主机交互这些内容不是都必须的，可自行选择是否设置 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#虚拟机与主机交互"},{"categories":null,"content":"安装增强功能（仅第一次使用要执行此步骤） 首先点击设备→安装增强功能，弹出类似下图界面，点运行，认证账户密码进行安装 完成安装 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#安装增强功能"},{"categories":null,"content":"共享文件夹（需要先安装增强功能） 点击设备→共享文件夹 点击添加共享文件夹按钮 共享文件夹路径选择主机电脑上的文件夹 共享文件夹名称可以默认自动填写 挂载点填 /home/自己的虚拟机用户名/喜欢的文件夹名称 勾选自动挂载和固定分配 填写完成后确定 可以发现喜欢的文件夹名称出现在了Ubuntu虚拟机文件中的主目录下 **必须!**打开虚拟机终端，输入下面的指令，获取共享文件夹权限，重启虚拟机 sudo usermod -aG vboxsf $(whoami) 共享文件夹设置成功，里面文件完全相同 注意：对于虚拟机来说，在共享文件夹中进行操作可能遇到奇怪的权限问题，因此建议只将共享文件夹用于文件传输，不要在里面编译或运行可执行文件 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#共享文件夹"},{"categories":null,"content":"共享粘贴板及拖放在VirtualBox管理器中打开虚拟机设置 进入常规→高级，共享粘贴板和拖放选择双向，确定，重启 之后主机和虚拟机文字可以直接复制粘贴，可以直接从主机拖放文件进入虚拟机 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:3","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#共享粘贴板及拖放"},{"categories":null,"content":"网络通讯IP通信虚拟机完全关机（不是休眠），VirtualBox管理器里打开虚拟机设置 打开网络选项卡 网卡1设置Host-Only网络，混杂模式选全部允许 网卡2设置NAT网络 打开VirtualBox管理器管理→主机网络管理器 记住这里的IPv4地址 打开虚拟机，进入虚拟机内设置→网络 设置第一个网卡，IPv4方式改为手动，地址填写192.168.56.x，192.168.56这个前缀必须与VirtualBox Host-Only Ethernet Adapter的IPv4地址前缀一致，x可以在2~254里挑个喜欢的，但不能与已存在的重复。 子网掩码填255.255.255.0 设置完成后点应用 设置完成后，主机可通过刚刚设置的192.168.56.x地址访问虚拟机，虚拟机可以通过192.168.56.1访问主机 端口转发VirtualBox管理器里打开虚拟机设置→网络 在连接方式为NAT的网卡中打开高级，设置端口转发，可根据需要自行设置 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:4","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#网络通讯"},{"categories":null,"content":"网络通讯IP通信虚拟机完全关机（不是休眠），VirtualBox管理器里打开虚拟机设置 打开网络选项卡 网卡1设置Host-Only网络，混杂模式选全部允许 网卡2设置NAT网络 打开VirtualBox管理器管理→主机网络管理器 记住这里的IPv4地址 打开虚拟机，进入虚拟机内设置→网络 设置第一个网卡，IPv4方式改为手动，地址填写192.168.56.x，192.168.56这个前缀必须与VirtualBox Host-Only Ethernet Adapter的IPv4地址前缀一致，x可以在2~254里挑个喜欢的，但不能与已存在的重复。 子网掩码填255.255.255.0 设置完成后点应用 设置完成后，主机可通过刚刚设置的192.168.56.x地址访问虚拟机，虚拟机可以通过192.168.56.1访问主机 端口转发VirtualBox管理器里打开虚拟机设置→网络 在连接方式为NAT的网卡中打开高级，设置端口转发，可根据需要自行设置 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:4","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#ip通信"},{"categories":null,"content":"网络通讯IP通信虚拟机完全关机（不是休眠），VirtualBox管理器里打开虚拟机设置 打开网络选项卡 网卡1设置Host-Only网络，混杂模式选全部允许 网卡2设置NAT网络 打开VirtualBox管理器管理→主机网络管理器 记住这里的IPv4地址 打开虚拟机，进入虚拟机内设置→网络 设置第一个网卡，IPv4方式改为手动，地址填写192.168.56.x，192.168.56这个前缀必须与VirtualBox Host-Only Ethernet Adapter的IPv4地址前缀一致，x可以在2~254里挑个喜欢的，但不能与已存在的重复。 子网掩码填255.255.255.0 设置完成后点应用 设置完成后，主机可通过刚刚设置的192.168.56.x地址访问虚拟机，虚拟机可以通过192.168.56.1访问主机 端口转发VirtualBox管理器里打开虚拟机设置→网络 在连接方式为NAT的网卡中打开高级，设置端口转发，可根据需要自行设置 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:5:4","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#端口转发"},{"categories":null,"content":"Point Cloud Library 的安装在应用程序菜单中找到终端，打开 输入 sudo apt update 然后输入用户密码，更新软件源信息 其中sudo指令表示作为管理员运行指令。 接下来开始安装Point Cloud Library库。我们需要安装下面几个软件包 libpcl-dev pcl-tools git cmake cmake-gui 其他相关的依赖软件包会一起自动完成下载安装，如果想了解这些软件包的更多信息，或是想查询其他软件包，可以到Ubuntu官方软件包网站https://packages.ubuntu.com/查询 安装的命令为 sudo apt install git sudo apt install cmake sudo apt install cmake-gui sudo apt install libpcl-dev sudo apt install pcl-tools 输入后会询问是否继续，输入y确定即可。 也可以直接一行命令完成，这里-y参数表示直接确认继续执行，不弹出提示 sudo apt install -y git cmake cmake-gui libpcl-dev pcl-tools 等待直到全部安装完成，如果报错，重新执行上面的指令 输入下面的指令，执行。pcl_logo.pcd为点云示例文件，运行时要根据实际输入正确的路径 pcl_viewer ./pcl_logo.pcd 成功打开pcd文件，证明安装成功 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:6:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#point-cloud-library-的安装"},{"categories":null,"content":"配置Visual Studio CodeVSCode是一个轻量级的代码编辑器，挺好用的 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:0","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#配置visual-studio-code"},{"categories":null,"content":"本地安装安装 更新于2021年6月4日19点02分 Ubuntu虚拟机中应用程序菜单打开Ubuntu 软件，搜索Visual Studio Code，安装。第一个就是 在ubuntu 软件中安装的Visual Studio Code不是完整版，会出现无法输入中文的情况，不建议采用这种方法安装 解决方法参考下面的网址，直接从Microsoft官方网站安装VSCode官方版本 https://blog.csdn.net/qq_35092399/article/details/105526908 sudo apt install curl curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor \u003e packages.microsoft.gpg sudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/ sudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main\" \u003e /etc/apt/sources.list.d/vscode.list' sudo apt install apt-transport-https sudo apt update sudo apt install code ## or code-insiders 由于Microsoft服务器在国内访问服务质量较差，需要等待较长时间或者自行设置代理 安装完成，打开 安装扩展程序点击扩展，安装Chinese (Simplified)语言，安装C/C++扩展，安装CMake，安装CMake Tools 配置Visual Studio Code打开存放项目的文件夹 在项目文件夹根目录创建一个叫.vscode的文件夹，该文件夹内的文件用于设定此项目中VSCode及其扩展软件的功能及行为 在.vscode里面创建c_cpp_properties.json该文件用于提供智能补全功能 { \"configurations\": [ { \"name\": \"Linux\", \"includePath\": [ \"${workspaceFolder}/**\", \"/usr/include/pcl-1.8\", \"/usr/include\", \"/usr/include/eigen3\", \"/usr/local/include\", \"/usr/include/vtk-6.3\" ], \"defines\": [], \"compilerPath\": \"/usr/bin/gcc\", \"cStandard\": \"gnu11\", \"cppStandard\": \"gnu++14\", \"intelliSenseMode\": \"gcc-x64\" } ], \"version\": 4 } setting.json { \"files.defaultLanguage\": \"c\", // ctrl+N新建文件后默认的语言 \"editor.formatOnType\": true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码 \"files.watcherExclude\": { // VSCode排除不重要文件的变动监视，减少压力 \"**/CMakeFiles/**\": true, // CMake自动生成的过程文件 \"**/pcdXYZ_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/pcdXYZI_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/.git/objects/**\": true, \"**/.git/subtree-cache/**\": true, \"**/node_modules/*/**\": true } } 这样就配置好了基本的编辑环境，更多的设置可自行搜索 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#本地安装"},{"categories":null,"content":"本地安装安装 更新于2021年6月4日19点02分 Ubuntu虚拟机中应用程序菜单打开Ubuntu 软件，搜索Visual Studio Code，安装。第一个就是 在ubuntu 软件中安装的Visual Studio Code不是完整版，会出现无法输入中文的情况，不建议采用这种方法安装 解决方法参考下面的网址，直接从Microsoft官方网站安装VSCode官方版本 https://blog.csdn.net/qq_35092399/article/details/105526908 sudo apt install curl curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor packages.microsoft.gpg sudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/ sudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main\" /etc/apt/sources.list.d/vscode.list' sudo apt install apt-transport-https sudo apt update sudo apt install code ## or code-insiders 由于Microsoft服务器在国内访问服务质量较差，需要等待较长时间或者自行设置代理 安装完成，打开 安装扩展程序点击扩展，安装Chinese (Simplified)语言，安装C/C++扩展，安装CMake，安装CMake Tools 配置Visual Studio Code打开存放项目的文件夹 在项目文件夹根目录创建一个叫.vscode的文件夹，该文件夹内的文件用于设定此项目中VSCode及其扩展软件的功能及行为 在.vscode里面创建c_cpp_properties.json该文件用于提供智能补全功能 { \"configurations\": [ { \"name\": \"Linux\", \"includePath\": [ \"${workspaceFolder}/**\", \"/usr/include/pcl-1.8\", \"/usr/include\", \"/usr/include/eigen3\", \"/usr/local/include\", \"/usr/include/vtk-6.3\" ], \"defines\": [], \"compilerPath\": \"/usr/bin/gcc\", \"cStandard\": \"gnu11\", \"cppStandard\": \"gnu++14\", \"intelliSenseMode\": \"gcc-x64\" } ], \"version\": 4 } setting.json { \"files.defaultLanguage\": \"c\", // ctrl+N新建文件后默认的语言 \"editor.formatOnType\": true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码 \"files.watcherExclude\": { // VSCode排除不重要文件的变动监视，减少压力 \"**/CMakeFiles/**\": true, // CMake自动生成的过程文件 \"**/pcdXYZ_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/pcdXYZI_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/.git/objects/**\": true, \"**/.git/subtree-cache/**\": true, \"**/node_modules/*/**\": true } } 这样就配置好了基本的编辑环境，更多的设置可自行搜索 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#安装"},{"categories":null,"content":"本地安装安装 更新于2021年6月4日19点02分 Ubuntu虚拟机中应用程序菜单打开Ubuntu 软件，搜索Visual Studio Code，安装。第一个就是 在ubuntu 软件中安装的Visual Studio Code不是完整版，会出现无法输入中文的情况，不建议采用这种方法安装 解决方法参考下面的网址，直接从Microsoft官方网站安装VSCode官方版本 https://blog.csdn.net/qq_35092399/article/details/105526908 sudo apt install curl curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor packages.microsoft.gpg sudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/ sudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main\" /etc/apt/sources.list.d/vscode.list' sudo apt install apt-transport-https sudo apt update sudo apt install code ## or code-insiders 由于Microsoft服务器在国内访问服务质量较差，需要等待较长时间或者自行设置代理 安装完成，打开 安装扩展程序点击扩展，安装Chinese (Simplified)语言，安装C/C++扩展，安装CMake，安装CMake Tools 配置Visual Studio Code打开存放项目的文件夹 在项目文件夹根目录创建一个叫.vscode的文件夹，该文件夹内的文件用于设定此项目中VSCode及其扩展软件的功能及行为 在.vscode里面创建c_cpp_properties.json该文件用于提供智能补全功能 { \"configurations\": [ { \"name\": \"Linux\", \"includePath\": [ \"${workspaceFolder}/**\", \"/usr/include/pcl-1.8\", \"/usr/include\", \"/usr/include/eigen3\", \"/usr/local/include\", \"/usr/include/vtk-6.3\" ], \"defines\": [], \"compilerPath\": \"/usr/bin/gcc\", \"cStandard\": \"gnu11\", \"cppStandard\": \"gnu++14\", \"intelliSenseMode\": \"gcc-x64\" } ], \"version\": 4 } setting.json { \"files.defaultLanguage\": \"c\", // ctrl+N新建文件后默认的语言 \"editor.formatOnType\": true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码 \"files.watcherExclude\": { // VSCode排除不重要文件的变动监视，减少压力 \"**/CMakeFiles/**\": true, // CMake自动生成的过程文件 \"**/pcdXYZ_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/pcdXYZI_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/.git/objects/**\": true, \"**/.git/subtree-cache/**\": true, \"**/node_modules/*/**\": true } } 这样就配置好了基本的编辑环境，更多的设置可自行搜索 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#安装扩展程序"},{"categories":null,"content":"本地安装安装 更新于2021年6月4日19点02分 Ubuntu虚拟机中应用程序菜单打开Ubuntu 软件，搜索Visual Studio Code，安装。第一个就是 在ubuntu 软件中安装的Visual Studio Code不是完整版，会出现无法输入中文的情况，不建议采用这种方法安装 解决方法参考下面的网址，直接从Microsoft官方网站安装VSCode官方版本 https://blog.csdn.net/qq_35092399/article/details/105526908 sudo apt install curl curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor packages.microsoft.gpg sudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/ sudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main\" /etc/apt/sources.list.d/vscode.list' sudo apt install apt-transport-https sudo apt update sudo apt install code ## or code-insiders 由于Microsoft服务器在国内访问服务质量较差，需要等待较长时间或者自行设置代理 安装完成，打开 安装扩展程序点击扩展，安装Chinese (Simplified)语言，安装C/C++扩展，安装CMake，安装CMake Tools 配置Visual Studio Code打开存放项目的文件夹 在项目文件夹根目录创建一个叫.vscode的文件夹，该文件夹内的文件用于设定此项目中VSCode及其扩展软件的功能及行为 在.vscode里面创建c_cpp_properties.json该文件用于提供智能补全功能 { \"configurations\": [ { \"name\": \"Linux\", \"includePath\": [ \"${workspaceFolder}/**\", \"/usr/include/pcl-1.8\", \"/usr/include\", \"/usr/include/eigen3\", \"/usr/local/include\", \"/usr/include/vtk-6.3\" ], \"defines\": [], \"compilerPath\": \"/usr/bin/gcc\", \"cStandard\": \"gnu11\", \"cppStandard\": \"gnu++14\", \"intelliSenseMode\": \"gcc-x64\" } ], \"version\": 4 } setting.json { \"files.defaultLanguage\": \"c\", // ctrl+N新建文件后默认的语言 \"editor.formatOnType\": true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码 \"files.watcherExclude\": { // VSCode排除不重要文件的变动监视，减少压力 \"**/CMakeFiles/**\": true, // CMake自动生成的过程文件 \"**/pcdXYZ_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/pcdXYZI_files/**\": true, // 个人固定的pcd原始数据存放文件夹 \"**/.git/objects/**\": true, \"**/.git/subtree-cache/**\": true, \"**/node_modules/*/**\": true } } 这样就配置好了基本的编辑环境，更多的设置可自行搜索 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:1","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#配置visual-studio-code-1"},{"categories":null,"content":"远程开发(进阶)除了在Ubuntu中安装VSCode直接本地开发以外，还可以通过ssh连接到Ubuntu，进行远程开发 VSCode中内置了Remote - SSH扩展程序，安装后即可ssh连接到Ubuntu虚拟机，打开项目工作区进行开发。开发体验基本相同，且输入体验和显示效果更加舒服，符合日常习惯。不过终端执行命令不支持直接远程弹出图形显示窗口，如果想要看到图形效果建议直接在虚拟机内执行命令。 Ubuntu安装ssh-server一般输入下面的命令安装完即可，无需额外设置 sudo apt install openssh-server Windows生成密钥**默认Windows里已经装了Git 可参考git的教程 https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5 打开Git Bash，输入下面的命令生成公钥和私钥 ssh-keygen -t rsa -f /path/to/key_name -C \"youremailaddress@example.com\" -t参数指定了加密方法，可自行搜索其它加密方法，如果不指定则默认rsa -f参数用于自行指定密钥存放路径，可以填相对路径，如果不设置-f参数，会出现提示输入密钥存放路径，这里要写绝对路径，如果不输入则密钥默认生成于 /c/Users/你的用户名/.ssh/id_rsa 出现提示设置密码，如果不需要密码，留空 完成密钥创建 在上面自行设定的/path/to/里面可以看到下面两个文件 key_name key_name.pub key_name是私钥，不要给别人 key_name.pub是公钥，要传输到服务器上 发送公钥到ssh服务端上 ssh-copy-id -i /path/to/xx.pub UserName@AddressOfServer 这里UserName是服务器上的用户名，AddressOfServer是服务器地址，可以是IP或域名 修改SSH config filesSSH config files位于C:/Users/你的用户名/.ssh/config，在里面加入如下内容 Host 服务端的别名 HostName 服务端地址 User 服务端上的用户名 IdentityFile 对应本地私钥的路径 VSCode进行远程开发VSCode安装好Remote - SSH扩展 打开VSCode远程资源管理器，看到在SSH config files里设置好的服务端，鼠标放上面点击按钮，打开一个新的远程开发窗口，完成 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#远程开发进阶"},{"categories":null,"content":"远程开发(进阶)除了在Ubuntu中安装VSCode直接本地开发以外，还可以通过ssh连接到Ubuntu，进行远程开发 VSCode中内置了Remote - SSH扩展程序，安装后即可ssh连接到Ubuntu虚拟机，打开项目工作区进行开发。开发体验基本相同，且输入体验和显示效果更加舒服，符合日常习惯。不过终端执行命令不支持直接远程弹出图形显示窗口，如果想要看到图形效果建议直接在虚拟机内执行命令。 Ubuntu安装ssh-server一般输入下面的命令安装完即可，无需额外设置 sudo apt install openssh-server Windows生成密钥**默认Windows里已经装了Git 可参考git的教程 https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5 打开Git Bash，输入下面的命令生成公钥和私钥 ssh-keygen -t rsa -f /path/to/key_name -C \"youremailaddress@example.com\" -t参数指定了加密方法，可自行搜索其它加密方法，如果不指定则默认rsa -f参数用于自行指定密钥存放路径，可以填相对路径，如果不设置-f参数，会出现提示输入密钥存放路径，这里要写绝对路径，如果不输入则密钥默认生成于 /c/Users/你的用户名/.ssh/id_rsa 出现提示设置密码，如果不需要密码，留空 完成密钥创建 在上面自行设定的/path/to/里面可以看到下面两个文件 key_name key_name.pub key_name是私钥，不要给别人 key_name.pub是公钥，要传输到服务器上 发送公钥到ssh服务端上 ssh-copy-id -i /path/to/xx.pub UserName@AddressOfServer 这里UserName是服务器上的用户名，AddressOfServer是服务器地址，可以是IP或域名 修改SSH config filesSSH config files位于C:/Users/你的用户名/.ssh/config，在里面加入如下内容 Host 服务端的别名 HostName 服务端地址 User 服务端上的用户名 IdentityFile 对应本地私钥的路径 VSCode进行远程开发VSCode安装好Remote - SSH扩展 打开VSCode远程资源管理器，看到在SSH config files里设置好的服务端，鼠标放上面点击按钮，打开一个新的远程开发窗口，完成 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#ubuntu安装ssh-server"},{"categories":null,"content":"远程开发(进阶)除了在Ubuntu中安装VSCode直接本地开发以外，还可以通过ssh连接到Ubuntu，进行远程开发 VSCode中内置了Remote - SSH扩展程序，安装后即可ssh连接到Ubuntu虚拟机，打开项目工作区进行开发。开发体验基本相同，且输入体验和显示效果更加舒服，符合日常习惯。不过终端执行命令不支持直接远程弹出图形显示窗口，如果想要看到图形效果建议直接在虚拟机内执行命令。 Ubuntu安装ssh-server一般输入下面的命令安装完即可，无需额外设置 sudo apt install openssh-server Windows生成密钥**默认Windows里已经装了Git 可参考git的教程 https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5 打开Git Bash，输入下面的命令生成公钥和私钥 ssh-keygen -t rsa -f /path/to/key_name -C \"youremailaddress@example.com\" -t参数指定了加密方法，可自行搜索其它加密方法，如果不指定则默认rsa -f参数用于自行指定密钥存放路径，可以填相对路径，如果不设置-f参数，会出现提示输入密钥存放路径，这里要写绝对路径，如果不输入则密钥默认生成于 /c/Users/你的用户名/.ssh/id_rsa 出现提示设置密码，如果不需要密码，留空 完成密钥创建 在上面自行设定的/path/to/里面可以看到下面两个文件 key_name key_name.pub key_name是私钥，不要给别人 key_name.pub是公钥，要传输到服务器上 发送公钥到ssh服务端上 ssh-copy-id -i /path/to/xx.pub UserName@AddressOfServer 这里UserName是服务器上的用户名，AddressOfServer是服务器地址，可以是IP或域名 修改SSH config filesSSH config files位于C:/Users/你的用户名/.ssh/config，在里面加入如下内容 Host 服务端的别名 HostName 服务端地址 User 服务端上的用户名 IdentityFile 对应本地私钥的路径 VSCode进行远程开发VSCode安装好Remote - SSH扩展 打开VSCode远程资源管理器，看到在SSH config files里设置好的服务端，鼠标放上面点击按钮，打开一个新的远程开发窗口，完成 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#windows生成密钥"},{"categories":null,"content":"远程开发(进阶)除了在Ubuntu中安装VSCode直接本地开发以外，还可以通过ssh连接到Ubuntu，进行远程开发 VSCode中内置了Remote - SSH扩展程序，安装后即可ssh连接到Ubuntu虚拟机，打开项目工作区进行开发。开发体验基本相同，且输入体验和显示效果更加舒服，符合日常习惯。不过终端执行命令不支持直接远程弹出图形显示窗口，如果想要看到图形效果建议直接在虚拟机内执行命令。 Ubuntu安装ssh-server一般输入下面的命令安装完即可，无需额外设置 sudo apt install openssh-server Windows生成密钥**默认Windows里已经装了Git 可参考git的教程 https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5 打开Git Bash，输入下面的命令生成公钥和私钥 ssh-keygen -t rsa -f /path/to/key_name -C \"youremailaddress@example.com\" -t参数指定了加密方法，可自行搜索其它加密方法，如果不指定则默认rsa -f参数用于自行指定密钥存放路径，可以填相对路径，如果不设置-f参数，会出现提示输入密钥存放路径，这里要写绝对路径，如果不输入则密钥默认生成于 /c/Users/你的用户名/.ssh/id_rsa 出现提示设置密码，如果不需要密码，留空 完成密钥创建 在上面自行设定的/path/to/里面可以看到下面两个文件 key_name key_name.pub key_name是私钥，不要给别人 key_name.pub是公钥，要传输到服务器上 发送公钥到ssh服务端上 ssh-copy-id -i /path/to/xx.pub UserName@AddressOfServer 这里UserName是服务器上的用户名，AddressOfServer是服务器地址，可以是IP或域名 修改SSH config filesSSH config files位于C:/Users/你的用户名/.ssh/config，在里面加入如下内容 Host 服务端的别名 HostName 服务端地址 User 服务端上的用户名 IdentityFile 对应本地私钥的路径 VSCode进行远程开发VSCode安装好Remote - SSH扩展 打开VSCode远程资源管理器，看到在SSH config files里设置好的服务端，鼠标放上面点击按钮，打开一个新的远程开发窗口，完成 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#发送公钥到ssh服务端上"},{"categories":null,"content":"远程开发(进阶)除了在Ubuntu中安装VSCode直接本地开发以外，还可以通过ssh连接到Ubuntu，进行远程开发 VSCode中内置了Remote - SSH扩展程序，安装后即可ssh连接到Ubuntu虚拟机，打开项目工作区进行开发。开发体验基本相同，且输入体验和显示效果更加舒服，符合日常习惯。不过终端执行命令不支持直接远程弹出图形显示窗口，如果想要看到图形效果建议直接在虚拟机内执行命令。 Ubuntu安装ssh-server一般输入下面的命令安装完即可，无需额外设置 sudo apt install openssh-server Windows生成密钥**默认Windows里已经装了Git 可参考git的教程 https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5 打开Git Bash，输入下面的命令生成公钥和私钥 ssh-keygen -t rsa -f /path/to/key_name -C \"youremailaddress@example.com\" -t参数指定了加密方法，可自行搜索其它加密方法，如果不指定则默认rsa -f参数用于自行指定密钥存放路径，可以填相对路径，如果不设置-f参数，会出现提示输入密钥存放路径，这里要写绝对路径，如果不输入则密钥默认生成于 /c/Users/你的用户名/.ssh/id_rsa 出现提示设置密码，如果不需要密码，留空 完成密钥创建 在上面自行设定的/path/to/里面可以看到下面两个文件 key_name key_name.pub key_name是私钥，不要给别人 key_name.pub是公钥，要传输到服务器上 发送公钥到ssh服务端上 ssh-copy-id -i /path/to/xx.pub UserName@AddressOfServer 这里UserName是服务器上的用户名，AddressOfServer是服务器地址，可以是IP或域名 修改SSH config filesSSH config files位于C:/Users/你的用户名/.ssh/config，在里面加入如下内容 Host 服务端的别名 HostName 服务端地址 User 服务端上的用户名 IdentityFile 对应本地私钥的路径 VSCode进行远程开发VSCode安装好Remote - SSH扩展 打开VSCode远程资源管理器，看到在SSH config files里设置好的服务端，鼠标放上面点击按钮，打开一个新的远程开发窗口，完成 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#修改ssh-config-files"},{"categories":null,"content":"远程开发(进阶)除了在Ubuntu中安装VSCode直接本地开发以外，还可以通过ssh连接到Ubuntu，进行远程开发 VSCode中内置了Remote - SSH扩展程序，安装后即可ssh连接到Ubuntu虚拟机，打开项目工作区进行开发。开发体验基本相同，且输入体验和显示效果更加舒服，符合日常习惯。不过终端执行命令不支持直接远程弹出图形显示窗口，如果想要看到图形效果建议直接在虚拟机内执行命令。 Ubuntu安装ssh-server一般输入下面的命令安装完即可，无需额外设置 sudo apt install openssh-server Windows生成密钥**默认Windows里已经装了Git 可参考git的教程 https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5 打开Git Bash，输入下面的命令生成公钥和私钥 ssh-keygen -t rsa -f /path/to/key_name -C \"youremailaddress@example.com\" -t参数指定了加密方法，可自行搜索其它加密方法，如果不指定则默认rsa -f参数用于自行指定密钥存放路径，可以填相对路径，如果不设置-f参数，会出现提示输入密钥存放路径，这里要写绝对路径，如果不输入则密钥默认生成于 /c/Users/你的用户名/.ssh/id_rsa 出现提示设置密码，如果不需要密码，留空 完成密钥创建 在上面自行设定的/path/to/里面可以看到下面两个文件 key_name key_name.pub key_name是私钥，不要给别人 key_name.pub是公钥，要传输到服务器上 发送公钥到ssh服务端上 ssh-copy-id -i /path/to/xx.pub UserName@AddressOfServer 这里UserName是服务器上的用户名，AddressOfServer是服务器地址，可以是IP或域名 修改SSH config filesSSH config files位于C:/Users/你的用户名/.ssh/config，在里面加入如下内容 Host 服务端的别名 HostName 服务端地址 User 服务端上的用户名 IdentityFile 对应本地私钥的路径 VSCode进行远程开发VSCode安装好Remote - SSH扩展 打开VSCode远程资源管理器，看到在SSH config files里设置好的服务端，鼠标放上面点击按钮，打开一个新的远程开发窗口，完成 ","date":"2021-06-04","objectID":"/pcl-dev-env-ubuntu18.04-virtualbox/:7:2","series":null,"tags":null,"title":"配置PCL开发环境到Virtualbox Ubuntu18.04虚拟机","uri":"/pcl-dev-env-ubuntu18.04-virtualbox/#vscode进行远程开发"},{"categories":null,"content":"Point Cloud Library项目的编译使用官方教程源地址： https://pointclouds.org/documentation/tutorials/using_pcl_pcl_config.html 官方教程中提供了各平台比较通用的项目编译方法，这里作简单的翻译补充。 ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:1:0","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#point-cloud-library项目的编译使用"},{"categories":null,"content":"创建cpp文件和CMakeLists.txt在项目文件夹中，我们创建一个调用了pcl库保存pcd文件的模块的示例c++源码文件pcd_write.cpp，文件内容我们先不管。 #include \u003ciostream\u003e#include \u003cpcl/io/pcd_io.h\u003e#include \u003cpcl/point_types.h\u003e int main () { pcl::PointCloud\u003cpcl::PointXYZ\u003e cloud; // Fill in the cloud data cloud.width = 5; cloud.height = 1; cloud.is_dense = false; cloud.resize (cloud.width * cloud.height); for (auto\u0026 point: cloud) { point.x = 1024 * rand () / (RAND_MAX + 1.0f); point.y = 1024 * rand () / (RAND_MAX + 1.0f); point.z = 1024 * rand () / (RAND_MAX + 1.0f); } pcl::io::savePCDFileASCII (\"test_pcd.pcd\", cloud); std::cerr \u003c\u003c \"Saved \" \u003c\u003c cloud.size () \u003c\u003c \" data points to test_pcd.pcd.\" \u003c\u003c std::endl; for (const auto\u0026 point: cloud) std::cerr \u003c\u003c \" \" \u003c\u003c point.x \u003c\u003c \" \" \u003c\u003c point.y \u003c\u003c \" \" \u003c\u003c point.z \u003c\u003c std::endl; return (0); } 这个文件要先被编译成可执行文件，才能够运行使用。这里，我们使用CMake这个跨平台编译工具来对cpp文件进行编译。为此需要创建一个CMakeLists.txt来告诉CMake怎么编译。 不理解上面这段话没问题，在pcd_write.cpp同一个目录下创建一个CMakeLists.txt即可。 CMakeLists.txt内容如下 ## 这一行声明了需要的cmake最低版本号，不用改 cmake_minimum_required(VERSION 2.8 FATAL_ERROR)## 这一行是项目名称，一般没什么影响 project(your_project_name)## 这一行表示需要PCL最低1.2版本的所有组件，不清楚不要修改 find_package(PCL 1.2 REQUIRED)## 下面这三行不用改 include_directories(${PCL_INCLUDE_DIRS})link_directories(${PCL_LIBRARY_DIRS})add_definitions(${PCL_DEFINITIONS})## 这一句告诉CMake从单个源文件pcd_write.cpp建立一个名叫main的可执行文件 ## 源文件文件名需要根据实际修改 ## 可执行文件名称可根据个人喜好修改 add_executable (main pcd_write.cpp)## ^^^^ ^^^^^^^^^^^^^ ## 这一句表示将PCL库文件与可执行文件main链接 ## 这一句中可执行文件的名称要与前面一致 target_link_libraries (main ${PCL_LIBRARIES})## ^^^^ 正常使用中，我们只需要注意源文件名和可执行文件名保持正确，位置已在文件中标出 ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:1:1","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#创建cpp文件和cmakeliststxt"},{"categories":null,"content":"编译文件正确创建完成上面这两个文件后，项目目录结构如下所示，可以开始对cpp源文件进行编译了！ project_folder |-- pcd_write.cpp |-- CMakeLists.txt 我们先在项目文件夹中创建一个名为build的空文件夹，我们将在里面完成编译，文件夹叫build是约定俗成的，一般不修改 现在项目目录结构是这样的 project_folder |-- pcd_write.cpp |-- CMakeLists.txt |-- build 我们从文件进入build文件夹，右键打开终端。或者在终端里手动输入命令切换到build目录下。 执行下面的指令，即可完成编译 cmake .. make 编译成功后，终端中应该可以看到类似这样的信息 Scanning dependencies of target main [ 50%] Building CXX object CMakeFiles/main.dir/pcd_write.cpp.o [100%] Linking CXX executable main [100%] Built target main ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:1:2","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#编译文件"},{"categories":null,"content":"运行文件现在我们可以输入以下指令运行可执行文件main，观察源cpp文件的效果 ./main 使用示例文件得到的终端运行显示结果应该类似于这样，运行成功 Saved 5 data points to test_pcd.pcd. 0.352222 -0.151883 -0.106395 -0.397406 -0.473106 0.292602 -0.731898 0.667105 0.441304 -0.734766 0.854581 -0.0361733 -0.4607 -0.277468 -0.916762 我们可以看到在CMakeLists.txt中设置的名为main的可执行文件放在build目录下。现在项目目录结构如下 project_folder |-- pcd_write.cpp |-- CMakeLists.txt |-- build |-- main |-- 一些其它文件 ... ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:1:3","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#运行文件"},{"categories":null,"content":"总结以上就是编译运行一个使用了PCL的项目的步骤。在不同项目中基本只要注意CMakeLists.txt填写正确的源文件名和可执行文件名。 ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:1:4","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#总结"},{"categories":null,"content":"Point Cloud Library基础使用","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:2:0","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#point-cloud-library基础使用"},{"categories":null,"content":"pcd点云文件的读取PCL的pcd点云文件读写模块放在pcl/io/pcd_io.h中，记得include 读取pcd文件的关键代码为 pcl::PointCloud\u003cpcl::PointXYZ\u003e::Ptr cloud(new pcl::PointCloud\u003cpcl::PointXYZ\u003e); pcl::io::loadPCDFile(\"pcd文件的路径\", *cloud); 第一行的代码创建一个点云类型为pcl::PointXYZ的名为cloud的空点云 第二行的代码从pcd文件中读取点云数据，存入cloud中 完整的文件如下 main.cpp #include \u003ciostream\u003e //标准C++库中的输入输出类相关头文件。#include \u003cpcl/io/pcd_io.h\u003e //pcd 读写类相关的头文件。#include \u003cpcl/point_types.h\u003e //PCL中支持的点类型头文件。 int main(int argc, char **argv) { pcl::PointCloud\u003cpcl::PointXYZI\u003e::Ptr cloud(new pcl::PointCloud\u003cpcl::PointXYZI\u003e); if (pcl::io::loadPCDFile(argv[1], *cloud) == -1) { cout \u003c\u003c \"error input!\" \u003c\u003c endl; return -1; } // 输出点云信息 std::cout \u003c\u003c \"原始点云中包含点数量：\" \u003c\u003c cloud-\u003epoints.size() \u003c\u003c std::endl; std::cout \u003c\u003c \"height：\" \u003c\u003c cloud-\u003eheight \u003c\u003c \"\\nwidth：\" \u003c\u003c cloud-\u003ewidth \u003c\u003c std::endl; // 输出各点信息 for (const auto \u0026point : *cloud) std::cout \u003c\u003c \" \" \u003c\u003c point.x \u003c\u003c \" \" \u003c\u003c point.y \u003c\u003c \" \" \u003c\u003c point.z \u003c\u003c std::endl; return 0; } CMakeLists.txt cmake_minimum_required(VERSION 2.8 FATAL_ERROR)project(pcd_read)find_package(PCL 1.2 REQUIRED)include_directories(${PCL_INCLUDE_DIRS})link_directories(${PCL_LIBRARY_DIRS})add_definitions(${PCL_DEFINITIONS})add_executable (pcd_read main.cpp)target_link_libraries (pcd_read ${PCL_LIBRARIES}) 在源代码中，下面这一行这样写是为了程序运行时从命令行中获取参数 int main(int argc, char **argv) argc将包含参数数量，可执行文件本身占一个参数数量。 argv为参数数组，里面包含了所有的参数。 当终端中执行命令行如下时，程序中argc == 3，argv[0] == \"./main\"，argv[1] == \"value1\" ./main value1 value2 读取pcd文件的源代码如下，可以直接在终端执行时通过修改命令行读取不同的pcd文件，避免文件路径写死在程序中，为了读不同的文件浪费时间重复编译。 pcl::io::loadPCDFile(argv[1], *cloud); 编译完成后，终端执行命令行如下，就能够读取pcd文件了，文件路径根据实际修改 ./pcd_read ~/pcl/pcdXYZ_files/cloud00000.pcd ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:2:1","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#pcd点云文件的读取"},{"categories":null,"content":"保存点云到pcd文件PCL的pcd点云文件写入模块同样放在pcl/io/pcd_io.h中，记得include PCL将点云写入pcd文件的代码如下，点云数据默认以二进制的格式写入pcd文件中，加快读写速度 pcl::io::savePCDFile(\"path_to_save_pcd_file\", *cloud); 如果希望pcd文件中的点云数据以人类可读的格式保存，则使用如下代码 pcl::io::savePCDFileASCII(\"path_to_save_pcd_file\", *cloud); 完整示例代码 #include \u003ciostream\u003e //标准C++库中的输入输出类相关头文件。#include \u003cpcl/io/pcd_io.h\u003e //pcd 读写类相关的头文件。#include \u003cpcl/point_types.h\u003e //PCL中支持的点类型头文件。 int main(int argc, char **argv) { pcl::PointCloud\u003cpcl::PointXYZI\u003e::Ptr cloud(new pcl::PointCloud\u003cpcl::PointXYZI\u003e); // pcd文件路径根据实际修改或直接写成从参数里读 if (pcl::io::loadPCDFile(\"input.pcd\", *cloud) == -1) { std::cout \u003c\u003c \"error input!\" \u003c\u003c std::endl; return -1; } // pcd文件路径根据实际修改或直接写成从参数里读 pcl::io::savePCDFileASCII(\"output.pcd\", *cloud); return 0; } ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:2:2","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#保存点云到pcd文件"},{"categories":null,"content":"显示点云包含PCL完整可视化类的头文件为pcl/visualization/pcl_visualizer.h 首先，我们通过下面的代码建立一个名为viewer的可视化类对象，该对象弹出的显示的窗口名为Cloud Viewer pcl::visualization::PCLVisualizer::Ptr viewer(new pcl::visualization::PCLVisualizer(\"Cloud Viewer\")); 我们现在有一个如下定义的一个名为cloud的点云对象 pcl::PointCloud\u003cpcl::PointXYZ\u003e::Ptr cloud(new pcl::PointCloud\u003cpcl::PointXYZ\u003e); 然后通过以下代码，我们就可以将点云cloud显示在一个名为Cloud Viewer的窗口中，该点云在viewer中的id为cloud1 viewer-\u003eaddPointCloud(cloud, \"cloud1\"); 如果想显示多个点云，要注意id不能重复，否则后面重复id的点云将不会显示 viewer-\u003eaddPointCloud(cloud1, \"cloud1\"); viewer-\u003eaddPointCloud(cloud2, \"cloud2\"); 点云显示在窗口中后，程序会继续运行，运行完成后会直接退出，同时关闭点云显示窗口，这显然不是我们想要的 使用PCL时可以通过下面的两种方法暂停程序，保持点云显示，直到在点云显示窗口中按q退出 // 两种方法二选一 // 方法1，阻塞式，完全停止程序 viewer-\u003espin(); // 方法2，非阻塞式，可以在里面添加其它操作 while(viewer-\u003ewasStopped()) { // 可如下添加其他操作 viewer-\u003espinOnce(100); // boost::this_thread::sleep(boost::posix_time::microseconds(100000)); } 有的代码用的是system(\"pause\");来暂停程序，该方法只在Windows中有效，通用性差，不灵活，不建议使用 完整代码如下 #include \u003ciostream\u003e#include \u003cpcl/io/pcd_io.h\u003e#include \u003cpcl/point_types.h\u003e#include \u003cpcl/visualization/pcl_visualizer.h\u003e // 这里是为了方便统一调整点云类型 typedef pcl::PointXYZ PointT; int main(int argc, char **argv) { // 定义点云对象 pcl::PointCloud\u003cPointT\u003e::Ptr cloud(new pcl::PointCloud\u003cPointT\u003e); // 从命令行参数中直接读取pcd文件路径，写入cloud pcl::io::loadPCDFile(argv[1], *cloud); // 定义可视化对象 pcl::visualization::PCLVisualizer::Ptr viewer(new pcl::visualization::PCLVisualizer(\"Cloud Viewer\")); // --- 显示点云数据 ---- // \"cloud1\" 为显示id，默认cloud,显示多个点云时用默认会报警告。 viewer-\u003eaddPointCloud(cloud, \"cloud1\"); // 阻塞式暂停程序 viewer-\u003espin(); /* // 非阻塞式，二选一 while (!viewer.wasStopped()) { viewer-\u003espinOnce(100); } */ return 0; } ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:2:3","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#显示点云"},{"categories":null,"content":"Point Cloud Library学习指南","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:3:0","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#point-cloud-library学习指南"},{"categories":null,"content":"中文学习资料PCL学习可以先看看双愚这位作者写的学习指南和学习笔记，是中文的，很详细清晰，很适合学习理解 https://zhuanlan.zhihu.com/p/268524083 里面对Point Cloud Library整体框架、入门学习作了比较详细的介绍和总结 https://www.yuque.com/huangzhongqing/pcl 这里面是对PCL的学习总结，基本覆盖了正常操作需要的所有应用，对每个部分都有着较为详细的解释说明，而且包含了示例文件。我在学习时参考了很多 ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:3:1","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#中文学习资料"},{"categories":null,"content":"官方教程和文档官方也提供了PCL的使用指南，覆盖了PCL各个模块的使用，不过因为是全英文，刚学习时可能会比较难理解，但是官方教程保证了准确性和规范性，如果英语能力较好还是建议对照着读一读 https://pointclouds.org/documentation/tutorials/index.html 当你想知道某个模块的完整功能使用说明，或是知道某个模块需要引入哪个头文件，或是某个方法的来源，都可以在官方提供的PCL的API的完整说明文档中找到答案。建议对模块有问题的时候，先到里面看一看 https://pointclouds.org/documentation/index.html ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:3:2","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#官方教程和文档"},{"categories":null,"content":"PCL问题解决方法查找遇到问题我们通常先直接搜索引擎找答案，不过PCL开发相关的中文文章和资料占比其实是比较小的，有时如果想更好地找到问题的解决方法，要用英语关键词去搜一下，看看英语的文章资料 百度 百度搜索pcl+中文关键词，通常可以解决常见问题，搜到的大部分都是中文内容，不过有时会发现好几篇文章内容都是一模一样的 百度搜索pcl+英语关键词，可以查到官网页面，有时可以查到其它英语的文章 Google 用Google搜索pcl+中文关键词，有时可以查到百度没查到但是写得不错的中文文章 用Google搜索pcl+英语关键词，可以找到比较多的国外的文章以及论坛讨论 Github Github上会有一些PCL的示例代码和笔记，以及PCL的应用项目，有时候一些问题在Github里找找，可能可以发现别人已经搭好的项目源代码 可以直接在Github里搜关键词，也可以在Google里搜关键词+github ","date":"2021-06-03","objectID":"/pcl-getstarted-searching/:3:3","series":null,"tags":null,"title":"Point Cloud Library的基础入门及资料查找方法","uri":"/pcl-getstarted-searching/#pcl问题解决方法查找"}]